diff -pruN triggerhappy-release-0.5.0/eventnames.c triggerhappy-release-0.5.0-hyphop/eventnames.c
--- triggerhappy-release-0.5.0/eventnames.c	2016-09-06 16:46:30.000000000 +0300
+++ triggerhappy-release-0.5.0-hyphop/eventnames.c	2019-10-29 07:09:24.268394087 +0300
@@ -12,6 +12,8 @@
 
 const char *lookup_event_name_i( const int evtype, const int evcode ) {
 	switch(evtype) {
+		case EV_MSC:
+			return EV_NAME[EV_MSC];
 		case EV_KEY:
 			return (KEY_MAX >= evcode ? KEY_NAME[ evcode ] : NULL);
 		case EV_SW:
@@ -26,6 +28,9 @@ const char *lookup_event_name_i( const i
 }
 
 const char *lookup_event_name( const struct input_event ev ) {
+	if ( EV_MSC == ev.type && MSC_SCAN == ev.code ){
+		    return EV_NAME[EV_MSC];
+	}
 	return lookup_event_name_i( ev.type, ev.code );
 }
 
@@ -51,6 +56,11 @@ static int lookup_index(const char **map
 
 int lookup_event_code( const char *eventname ) {
 	int res = -1;
+
+	if ( strcmp( eventname, "EV_MSC" ) == 0  ) {
+		return MSC_SCAN;
+	}
+
 	if (res == -1) res = lookup_index(KEY_NAME, eventname, KEY_MAX);
 	if (res == -1) res = lookup_index(SW_NAME, eventname, SW_MAX);
 	if (res == -1) res = lookup_index(REL_NAME, eventname, REL_MAX);
@@ -59,6 +69,11 @@ int lookup_event_code( const char *event
 }
 
 int lookup_event_type( const char *eventname ) {
+
+	if ( strcmp( eventname, "EV_MSC" ) == 0  ) {
+		return EV_MSC;
+	}
+
 	if (lookup_index(KEY_NAME, eventname, KEY_MAX) != -1) {
 		return EV_KEY;
 	}
diff -pruN triggerhappy-release-0.5.0/thd.c triggerhappy-release-0.5.0-hyphop/thd.c
--- triggerhappy-release-0.5.0/thd.c	2016-09-06 16:46:30.000000000 +0300
+++ triggerhappy-release-0.5.0-hyphop/thd.c	2019-10-29 09:34:02.353398418 +0300
@@ -73,6 +73,9 @@ static int reload_triggerfile();
 static fd_set rfds;
 static int max_fd = -1;
 
+static struct input_event last_msc_ev;
+static struct timeval last_msc_delta;
+
 /*
  * Look up event and key names and print them to STDOUT
  */
@@ -111,7 +114,9 @@ static int read_event( device *dev ) {
 		return 1;
 	}
 	/* ignore all events except KEY, SW and REL*/
-	if (ev.type == EV_KEY || ev.type == EV_SW || ev.type == EV_REL || ev.type == EV_ABS) {
+	if (ev.type == EV_KEY || ev.type == EV_SW || ev.type == EV_REL ||
+		ev.type == EV_MSC ||
+		ev.type == EV_ABS) {
 		if (ev.type == EV_KEY && is_ignored( ev.code, ignored_keys)) {
 			return 0;
 		}
@@ -126,7 +131,27 @@ static int read_event( device *dev ) {
 			print_event( devname, ev );
 			print_triggerline( ev, *keystate );
 		}
-		run_triggers( ev.type, ev.code, ev.value, *keystate, dev );
+
+//		stop flood for scan codes
+		if (ev.type == EV_MSC)  { 
+
+//		    if ( ev.value == last_msc_ev.value ) {
+//			return 0;
+//		    }
+
+		    timersub(&ev.time, &last_msc_ev.time, &last_msc_delta);
+		    last_msc_ev = ev;
+
+//		    fprintf(stderr, "[i] %s %ld %ld\n", "EV",  last_msc_delta.tv_sec, last_msc_delta.tv_usec);
+
+		    if ( last_msc_delta.tv_sec < 1) {
+			if ( last_msc_delta.tv_usec < 500000 ) {
+			return 0;
+			}
+		    }
+
+		}
+		run_triggers( ev.type, ev.code, ev.value, *keystate, dev, ev );
 		change_keystate( *keystate, ev );
 	}
 	return 0;
@@ -248,8 +273,11 @@ static void list_event_table(int type, i
 
 static void list_events(void) {
 	list_event_table(EV_KEY, KEY_MAX);
+	fprintf(stderr, "---\n");
 	list_event_table(EV_SW, SW_MAX);
+	fprintf(stderr, "---\n");
 	list_event_table(EV_REL, REL_MAX);
+	fprintf(stderr, "---\n");
 	list_event_table(EV_ABS, REL_MAX);
 }
 
diff -pruN triggerhappy-release-0.5.0/thd.conf triggerhappy-release-0.5.0-hyphop/thd.conf
--- triggerhappy-release-0.5.0/thd.conf	1970-01-01 03:00:00.000000000 +0300
+++ triggerhappy-release-0.5.0-hyphop/thd.conf	2019-10-29 09:01:29.364351464 +0300
@@ -0,0 +1,2 @@
+EV_MSC 46 echo hello
+
diff -pruN triggerhappy-release-0.5.0/trigger.c triggerhappy-release-0.5.0-hyphop/trigger.c
--- triggerhappy-release-0.5.0/trigger.c	2016-09-06 16:46:30.000000000 +0300
+++ triggerhappy-release-0.5.0-hyphop/trigger.c	2019-10-29 09:06:52.915483472 +0300
@@ -19,6 +19,7 @@
 #include "trigger.h"
 #include "uinput.h"
 
+#include <linux/input.h>
 #include "triggerparser.h"
 
 static trigger *trigger_list = NULL;
@@ -179,7 +180,7 @@ static int correct_mode( const char *tmo
 	return (tmode == NULL) || (strcmp( get_trigger_mode(), tmode ) == 0);
 }
 
-void run_triggers(int type, int code, int value, keystate_holder ksh, device *dev) {
+void run_triggers(int type, int code, int value, keystate_holder ksh, device *dev, const struct input_event ev) {
 	if (triggers_are_enabled == 0) {
 		return;
 	}
@@ -194,7 +195,7 @@ void run_triggers(int type, int code, in
 		     correct_mode( et->mode ) &&
 		     devtag_equal(&(dev->tag[0]), &(et->devtag[0])) &&
 		     mods_equal(ksh, et->modifiers, (type==EV_KEY?code:-1) )) {
-			fprintf(stderr, "Executing trigger action: %s\n", et->action);
+//			fprintf(stderr, "Executing trigger action: %s\n", et->action);
 			/* switch trigger mode or execute program? */
 			if (et->action[0] == '@') {
 				change_trigger_mode( &(et->action)[1] );
@@ -213,20 +214,35 @@ void run_triggers(int type, int code, in
 					send_event( EV_SYN, 0, 0 );
 				}
 			} else {
+
+
 				int pid = fork();
+
+
 				if (pid == 0 ) {
 					/* adjust environment */
 					setenv( "TH_DEVICE", dev->devname, 1 );
 					setenv( "TH_KEYSTATE", get_keystate(ksh), 1 );
+
+
 					const char *en = lookup_event_name_i( et->type, et->code );
+
 					setenv( "TH_EVENT", en, 1 );
 					char ev[8];
 					sprintf( &(ev[0]), "%d", et->value );
 					setenv( "TH_VALUE", &(ev[0]), 1 );
+
+
+					fprintf(stderr, "Executing trigger action: %s | TH_DEVICE: %s | TH_KEYSATE: %s | TH_EVENT: %s | TH_VALUE: %s\n",
+					 et->action, dev->devname, get_keystate(ksh), en , ev );
+
+
 					/* default SIGCHLD is not automatically
 					   restored and most applications would
 					   fail if this signal is ignored */
 					signal(SIGCHLD, SIG_DFL);
+
+
 					system(et->action);
 					exit(0);
 				} else if (pid < 0) {
diff -pruN triggerhappy-release-0.5.0/trigger.h triggerhappy-release-0.5.0-hyphop/trigger.h
--- triggerhappy-release-0.5.0/trigger.h	2016-09-06 16:46:30.000000000 +0300
+++ triggerhappy-release-0.5.0-hyphop/trigger.h	2019-10-29 08:59:58.730137535 +0300
@@ -6,6 +6,7 @@
 
 #include "devtag.h"
 #define TRIGGER_MODIFIERS_MAX 5
+#include <linux/input.h>
 
 typedef int trigger_modifier[TRIGGER_MODIFIERS_MAX];
 
@@ -23,7 +24,7 @@ typedef struct trigger {
 trigger* parse_trigger(char* line);
 void append_trigger(trigger *t);
 int read_triggers(const char *filename);
-void run_triggers(int type, int code, int value, keystate_holder ksh, device *dev);
+void run_triggers(int type, int code, int value, keystate_holder ksh, device *dev, const struct input_event ev);
 void clear_triggers();
 
 void triggers_enabled( int status );
diff -pruN triggerhappy-release-0.5.0/triggerhappy.conf.examples triggerhappy-release-0.5.0-hyphop/triggerhappy.conf.examples
--- triggerhappy-release-0.5.0/triggerhappy.conf.examples	2016-09-06 16:46:30.000000000 +0300
+++ triggerhappy-release-0.5.0-hyphop/triggerhappy.conf.examples	2019-10-29 07:16:09.593509724 +0300
@@ -14,3 +14,8 @@ KEY_F12@media			1	@ # switch back to nam
 KEY_KPASTERISK			1	<KEY_VOLUMEDOWN # emit a synthetic key event through uinput
 # enable trigger only on devices tagged "sys"
 <sys>KEY_F11			1	id
+# type 4 (EV_MSC), code 4 (MSC_SCAN), value 589825
+EV_MSC	589825	echo "ir scan code example 589825"
+## ENV USAGE
+## Executing trigger action: echo HELLO | TH_DEVICE: /dev/input/event4 | TH_KEYSATE:  | TH_EVENT: EV_MSC | TH_VALUE: 46
+##
